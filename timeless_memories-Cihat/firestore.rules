rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUsername(username) {
      return username.matches('^[a-zA-Z0-9._]{3,30}$') 
        && !username.matches('.*\\.\\.')  // Art arda nokta olamaz
        && !username.matches('.*\\._')    // Nokta ve altçizgi yan yana olamaz
        && !username.matches('^[._]')     // Nokta veya altçizgi ile başlayamaz
        && !username.matches('[._]$');    // Nokta veya altçizgi ile bitemez
    }

    function isValidMemory() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'description', 'mediaUrls', 'createdAt']) 
        && data.userId == request.auth.uid
        && data.description.size() <= 2000
        && data.mediaUrls.size() <= 5;
    }

    // Ana memories koleksiyonu için kurallar
    match /memories/{memoryId} {
      allow read: if request.auth != null;
      allow list: if request.auth != null && request.query.limit <= 50;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Users collection
    match /users/{userId} {
      match /memories/{memoryId} {
        // Memory CRUD operations
        allow create: if isOwner(userId) && isValidMemory();
        allow read: if isOwner(userId);
        allow update: if isOwner(userId) 
          && isValidMemory()
          && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt']);
        allow delete: if isOwner(userId);
      }

      // User profile rules
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['email', 'username', 'name', 'createdAt'])
        && request.resource.data.email == request.auth.token.email
        && isValidUsername(request.resource.data.username);
      allow update: if isOwner(userId)
        && request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['name', 'username', 'bio', 'photoUrl', 'updatedAt', 'emailVerified']);
      allow delete: if false; // Kullanıcı silme devre dışı
    }

    // Galeri koleksiyonu için özel kurallar
    match /gallery/{itemId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}