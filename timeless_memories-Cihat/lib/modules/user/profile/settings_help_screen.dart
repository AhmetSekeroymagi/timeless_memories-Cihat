import 'package:flutter/material.dart';

final String privacyPolicy = '''
Timeless Memories Gizlilik PolitikasÄ±

KullanÄ±cÄ± bilgileriniz ve paylaÅŸÄ±mlarÄ±nÄ±z gizli tutulur, Ã¼Ã§Ã¼ncÃ¼ ÅŸahÄ±slarla paylaÅŸÄ±lmaz. Verileriniz yalnÄ±zca uygulama deneyiminizi iyileÅŸtirmek ve gÃ¼venliÄŸinizi saÄŸlamak amacÄ±yla kullanÄ±lÄ±r. HiÃ§bir kiÅŸisel veri izinsiz olarak saklanmaz veya paylaÅŸÄ±lmaz.

Uygulama iÃ§i paylaÅŸÄ±mlarÄ±nÄ±z, sadece sizin belirlediÄŸiniz kiÅŸilerle veya sadece sizin eriÅŸiminize aÃ§Ä±k olacak ÅŸekilde saklanÄ±r. HesabÄ±nÄ±zÄ± silmeniz durumunda tÃ¼m verileriniz kalÄ±cÄ± olarak silinir.

Daha fazla bilgi iÃ§in bizimle iletiÅŸime geÃ§ebilirsiniz.
''';

final String termsOfUse = '''
Timeless Memories KullanÄ±m ÅžartlarÄ±

UygulamayÄ± kullanarak, paylaÅŸÄ±mlarÄ±nÄ±zÄ±n ve kiÅŸisel bilgilerinizin gizlilik politikasÄ±na uygun ÅŸekilde saklanmasÄ±nÄ± kabul etmiÅŸ olursunuz. Uygulama Ã¼zerinden yapÄ±lan tÃ¼m paylaÅŸÄ±mlar, topluluk kurallarÄ±na ve yasalara uygun olmalÄ±dÄ±r. Uygunsuz iÃ§erikler ve kÃ¶tÃ¼ye kullanÄ±m durumunda hesabÄ±nÄ±z askÄ±ya alÄ±nabilir veya silinebilir.

UygulamanÄ±n iÅŸleyiÅŸiyle ilgili deÄŸiÅŸiklik yapma hakkÄ± saklÄ±dÄ±r. KullanÄ±cÄ±lar, uygulamayÄ± kullanmaya devam ederek bu ÅŸartlarÄ± kabul etmiÅŸ sayÄ±lÄ±r.
''';

class SettingsHelpScreen extends StatelessWidget {
  const SettingsHelpScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Ayarlar & YardÄ±m')),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          const Text('KullanÄ±cÄ± Profili', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
          const SizedBox(height: 8),
          ListTile(
            leading: const Icon(Icons.person),
            title: const Text('AdÄ± DeÄŸiÅŸtir'),
            onTap: () {
              final TextEditingController _nameController = TextEditingController();
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('AdÄ± DeÄŸiÅŸtir'),
                  content: TextField(
                    controller: _nameController,
                    decoration: const InputDecoration(labelText: 'Yeni Ad'),
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Ä°ptal'),
                    ),
                    ElevatedButton(
                      onPressed: () {
                        Navigator.pop(context);
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('Ad deÄŸiÅŸtirildi: ${_nameController.text} (dummy)')),
                        );
                      },
                      child: const Text('Kaydet'),
                    ),
                  ],
                ),
              );
            },
          ),
          ListTile(
            leading: const Icon(Icons.email),
            title: const Text('E-posta DeÄŸiÅŸtir'),
            onTap: () {
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('E-posta DeÄŸiÅŸtir'),
                  content: const Text('Bu Ã¶zellik yakÄ±nda eklenecek!'),
                  actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text('Tamam'))],
                ),
              );
            },
          ),
          ListTile(
            leading: const Icon(Icons.lock),
            title: const Text('Parola DeÄŸiÅŸtir'),
            onTap: () {
              final TextEditingController _oldPass = TextEditingController();
              final TextEditingController _newPass = TextEditingController();
              final TextEditingController _newPass2 = TextEditingController();
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('Parola DeÄŸiÅŸtir'),
                  content: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextField(
                        controller: _oldPass,
                        obscureText: true,
                        decoration: const InputDecoration(labelText: 'Eski Parola'),
                      ),
                      TextField(
                        controller: _newPass,
                        obscureText: true,
                        decoration: const InputDecoration(labelText: 'Yeni Parola'),
                      ),
                      TextField(
                        controller: _newPass2,
                        obscureText: true,
                        decoration: const InputDecoration(labelText: 'Yeni Parola (Tekrar)'),
                      ),
                    ],
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Ä°ptal'),
                    ),
                    ElevatedButton(
                      onPressed: () {
                        Navigator.pop(context);
                        if (_newPass.text != _newPass2.text) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Yeni parolalar eÅŸleÅŸmiyor!')),
                          );
                        } else {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Parola deÄŸiÅŸtirildi (dummy)')),
                          );
                        }
                      },
                      child: const Text('Kaydet'),
                    ),
                  ],
                ),
              );
            },
          ),
          const Divider(height: 32),
          const Text('YardÄ±m', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
          const SizedBox(height: 8),
          ExpansionTile(
            leading: const Icon(Icons.help_outline),
            title: const Text('SÄ±kÃ§a Sorulan Sorular (SSS)'),
            children: [
              ListTile(
                title: const Text('KapsÃ¼l nasÄ±l oluÅŸturulur?'),
                subtitle: const Text('Galeri veya Anasayfa Ã¼zerinden + butonuna tÄ±klayarak kapsÃ¼l oluÅŸturabilirsiniz.'),
              ),
              ListTile(
                title: const Text('KapsÃ¼l paylaÅŸÄ±mÄ± nasÄ±l yapÄ±lÄ±r?'),
                subtitle: const Text('KapsÃ¼l detayÄ±nda ðŸ“¤ paylaÅŸ butonunu kullanabilirsiniz.'),
              ),
            ],
          ),
          ListTile(
            leading: const Icon(Icons.support_agent),
            title: const Text('Destek Talebi GÃ¶nder'),
            onTap: () {
              final TextEditingController _emailController = TextEditingController();
              final TextEditingController _msgController = TextEditingController();
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('Destek Talebi'),
                  content: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextField(
                        controller: _emailController,
                        decoration: const InputDecoration(labelText: 'E-posta adresiniz'),
                      ),
                      TextField(
                        controller: _msgController,
                        decoration: const InputDecoration(labelText: 'MesajÄ±nÄ±z'),
                        maxLines: 3,
                      ),
                    ],
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Ä°ptal'),
                    ),
                    ElevatedButton(
                      onPressed: () {
                        Navigator.pop(context);
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('Destek talebiniz gÃ¶nderildi (dummy)')),
                        );
                      },
                      child: const Text('GÃ¶nder'),
                    ),
                  ],
                ),
              );
            },
          ),
          const Divider(height: 32),
          const Text('Yasal', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
          const SizedBox(height: 8),
          ListTile(
            leading: const Icon(Icons.privacy_tip),
            title: const Text('Gizlilik PolitikasÄ±'),
            onTap: () {
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('Gizlilik PolitikasÄ±'),
                  content: Text(privacyPolicy),
                  actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text('Kapat'))],
                ),
              );
            },
          ),
          ListTile(
            leading: const Icon(Icons.description),
            title: const Text('KullanÄ±m ÅžartlarÄ±'),
            onTap: () {
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('KullanÄ±m ÅžartlarÄ±'),
                  content: Text(termsOfUse),
                  actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text('Kapat'))],
                ),
              );
            },
          ),
          const Divider(height: 32),
          const Text('HakkÄ±mÄ±zda', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
          const SizedBox(height: 8),
          const ListTile(
            leading: Icon(Icons.info_outline),
            title: Text('Timeless Memories, anÄ±larÄ±nÄ±zÄ± gÃ¼venle saklamanÄ±zÄ± ve paylaÅŸmanÄ±zÄ± saÄŸlayan bir dijital kapsÃ¼l uygulamasÄ±dÄ±r.'),
          ),
          const SizedBox(height: 24),
          Center(
            child: Text(
              'SÃ¼rÃ¼m: 1.0.0',
              style: TextStyle(color: Colors.grey),
            ),
          ),
        ],
      ),
    );
  }
} 